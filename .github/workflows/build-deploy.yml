name: Build & Deploy to Minikube

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Start Minikube in the runner
      - name: Start Minikube
        uses: medyagh/setup-minikube@v0.0.15
        with:
          driver: docker
          kubernetes-version: v1.30.0
          start-args: "--addons=ingress"

      - name: Verify cluster
        run: |
          kubectl get nodes
          kubectl get ns

      - name: Build Docker image
        run: |
          IMAGE_NAME=myapp
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Load the image into Minikube's Docker registry (no external push needed)
      - name: Load image into Minikube
        run: |
          minikube image load $IMAGE_NAME:$IMAGE_TAG

      - name: Enable Ingress
        run: minikube addons enable ingress

      - name: Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.5/cert-manager.yaml
          kubectl -n cert-manager rollout status deploy/cert-manager --timeout=180s
          kubectl -n cert-manager rollout status deploy/cert-manager-webhook --timeout=180s
          kubectl -n cert-manager rollout status deploy/cert-manager-cainjector --timeout=180s

      - name: Verify cert-manager CRDs
        run: |
          kubectl get crd certificates.cert-manager.io clusterissuers.cert-manager.io

      - name: Create/Update K8s Secret from GitHub Secret
        run: |
          kubectl create secret generic myapp-secrets \
            --from-literal=SECRET_TOKEN='${{ secrets.SECRET_TOKEN }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests
        run: |
          # Replace image tag in a temp file (keeps repo clean)
          mkdir -p .tmp
          cp -r k8s .tmp/k8s
          sed -i "s|IMAGE_PLACEHOLDER|$IMAGE_NAME:$IMAGE_TAG|g" .tmp/k8s/deployment.yaml
          kubectl apply -f .tmp/k8s/

      - name: Show rendered deployment (sanity)
        run: sed -n '1,200p' .tmp/k8s/deployment.yaml
          
      - name: Wait for rollout (longer)
        run: kubectl rollout status deploy/myapp --timeout=300s

      - name: Verify Ingress TLS (in-cluster)
        run: |
          IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.spec.clusterIP}')
          kubectl run curl --image=curlimages/curl:8.8.0 --restart=Never --rm -i -- \
            sh -lc 'curl -ks -H "Host: myapp.local" https://'"$IP"'/'


      - name: K8s status
        run: |
          kubectl get deploy,rs,pods -l app=myapp -o wide
          kubectl get svc myapp -o wide

      - name: Smoke test (200 OK)
        run: |
          sleep 5
          RAW=$(
            kubectl run curl --image=curlimages/curl:8.8.0 --restart=Never --rm -i -- \
              sh -lc 'curl -s -o /dev/null -w "%{http_code}" http://myapp.default.svc.cluster.local/'
          )
          CODE=$(echo "$RAW" | grep -Eo '[0-9]{3}' | tail -1)
          echo "RAW: $RAW"
          echo "HTTP CODE: $CODE"
          test "$CODE" = "200"


      - name: Diagnostics (pods, logs, events)
        if: ${{ always() }}
        run: |
          set -x
          kubectl get pods -o wide
          kubectl describe deployment myapp || true
          kubectl describe pod -l app=myapp || true
          kubectl logs -l app=myapp --all-containers --tail=200 || true
          kubectl get events --sort-by=.metadata.creationTimestamp | tail -n 100 || true

      - name: Show service info
        run: |
          kubectl get svc myapp
          echo "To test locally: minikube service myapp --url"
